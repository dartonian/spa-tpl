{
  "name": "map-visit",
  "description": "Map `visit` over an array of objects.",
  "version": "0.1.4",
  "homepage": "https://github.com/jonschlinkert/map-visit",
  "author": {
    "name": "Jon Schlinkert",
    "url": "https://github.com/jonschlinkert"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/jonschlinkert/map-visit"
  },
  "bugs": {
    "url": "https://github.com/jonschlinkert/map-visit/issues"
  },
  "license": "MIT",
  "files": [
    "index.js",
    "utils.js"
  ],
  "main": "index.js",
  "engines": {
    "node": ">=0.10.0"
  },
  "scripts": {
    "test": "mocha"
  },
  "dependencies": {
    "lazy-cache": "^0.2.4",
    "object-visit": "^0.3.1"
  },
  "devDependencies": {
    "mocha": "*",
    "should": "*"
  },
  "keywords": [
    "array",
    "arrays",
    "function",
    "helper",
    "invoke",
    "key",
    "map",
    "method",
    "object",
    "objects",
    "value",
    "visit",
    "visitor"
  ],
  "verb": {
    "related": {
      "list": [
        "collection-visit",
        "object-visit"
      ]
    }
  },
  "readme": "# map-visit [![NPM version](https://badge.fury.io/js/map-visit.svg)](http://badge.fury.io/js/map-visit)  [![Build Status](https://travis-ci.org/jonschlinkert/map-visit.svg)](https://travis-ci.org/jonschlinkert/map-visit)\n\n> Map `visit` over an array of objects.\n\n## Install\n\nInstall with [npm](https://www.npmjs.com/)\n\n```sh\n$ npm i map-visit --save\n```\n\n## Usage\n\n```js\nvar mapVisit = require('map-visit');\n```\n\n## Assign or Merge vs. Visit\n\nLet's say you want to add a `set` method to your application that will:\n\n* set key-value pairs on a `data` object\n* extend objects onto the `data` object\n* extend arrays of objects onto the data object\n\n**Example using `extend`**\n\nHere is one way to accomplish this using Lo-Dash's `extend`:\n\n```js\nvar _ = require('lodash');\n\nvar obj = {\n  data: {},\n  set: function (key, value) {\n    if (Array.isArray(key)) {\n      _.extend.apply(_, [obj.data].concat(key));\n    } else if (typeof key === 'object') {\n      _.extend(obj.data, key);\n    } else {\n      obj.data[key] = value;\n    }\n  }\n};\n\nobj.set('a', 'a');\nobj.set([{b: 'b'}, {c: 'c'}]);\nobj.set({d: {e: 'f'}});\n\nconsole.log(obj.data);\n//=> {a: 'a', b: 'b', c: 'c', d: { e: 'f' }}\n```\n\nThe above approach works fine for most use cases. But **if you also want to emit an event** each time a property is added to the `data` object. A better approach would be to use `visit`.\n\n**Example using `visit`**\n\nIn this approach, when an array is passed to `set`, `mapVisit` calls `set` on each object in the array. When an object is passed, `visit` calls `set` on each property in the object. As a result, the `data` event will be emitted every time a property is added to `data`.\n\n```js\nvar mapVisit = require('map-visit');\nvar visit = require('object-visit');\n\nvar obj = {\n  data: {},\n  set: function (key, value) {\n    if (Array.isArray(key)) {\n      mapVisit(obj, 'set', key);\n    } else if (typeof key === 'object') {\n      visit(obj, 'set', key);\n    } else {\n      // some event-emitter\n      console.log('emit', key, value);\n      obj.data[key] = value;\n    }\n  }\n};\n\nobj.set('a', 'a');\nobj.set([{b: 'b'}, {c: 'c'}]);\nobj.set({d: {e: 'f'}});\nobj.set({g: 'h', i: 'j', k: 'l'});\n\nconsole.log(obj.data);\n//=> {a: 'a', b: 'b', c: 'c', d: { e: 'f' }, g: 'h', i: 'j', k: 'l'}\n\n// events would look something like:\n// emit a a\n// emit b b\n// emit c c\n// emit d { e: 'f' }\n// emit g h\n// emit i j\n// emit k l\n```\n\n## Related projects\n\n* [collection-visit](https://www.npmjs.com/package/collection-visit): Visit a method over the items in an object, or map visit over the objects… [more](https://www.npmjs.com/package/collection-visit) | [homepage](https://github.com/jonschlinkert/collection-visit)\n* [object-visit](https://www.npmjs.com/package/object-visit): Call the given method on each value in the given object. | [homepage](https://github.com/jonschlinkert/object-visit)\n\n## Running tests\n\nInstall dev dependencies:\n\n```sh\n$ npm i -d && npm test\n```\n\n## Contributing\n\nPull requests and stars are always welcome. For bugs and feature requests, [please create an issue](https://github.com/jonschlinkert/map-visit/issues/new).\n\n## Author\n\n**Jon Schlinkert**\n\n+ [github/jonschlinkert](https://github.com/jonschlinkert)\n+ [twitter/jonschlinkert](http://twitter.com/jonschlinkert)\n\n## License\n\nCopyright © 2015 Jon Schlinkert\nReleased under the MIT license.\n\n***\n\n_This file was generated by [verb-cli](https://github.com/assemble/verb-cli) on November 08, 2015._",
  "readmeFilename": "README.md",
  "_id": "map-visit@0.1.4",
  "dist": {
    "shasum": "cc23e08d984fe47f59696a71ce13c882d2e96c82"
  },
  "_from": "map-visit@^0.1.3",
  "_resolved": "https://registry.npmjs.org/map-visit/-/map-visit-0.1.4.tgz"
}
