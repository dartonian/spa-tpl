{
  "name": "expand",
  "description": "Recursively resolve templates in an object, string or array.",
  "version": "0.3.2",
  "homepage": "https://github.com/jonschlinkert/expand",
  "author": {
    "name": "Jon Schlinkert",
    "url": "https://github.com/jonschlinkert"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/jonschlinkert/expand"
  },
  "bugs": {
    "url": "https://github.com/jonschlinkert/expand/issues"
  },
  "license": "MIT",
  "files": [
    "index.js",
    "utils.js"
  ],
  "main": "index.js",
  "engines": {
    "node": ">=0.10.0"
  },
  "scripts": {
    "test": "mocha"
  },
  "dependencies": {
    "engine": "^0.1.8",
    "get-value": "^1.2.1",
    "is-primitive": "^2.0.0",
    "kind-of": "^2.0.1",
    "lazy-cache": "^0.2.3",
    "regex-flags": "^0.1.0"
  },
  "devDependencies": {
    "extend-shallow": "^2.0.1",
    "gulp": "^3.9.0",
    "gulp-istanbul": "^0.10.0",
    "gulp-jshint": "^1.11.2",
    "gulp-mocha": "^2.1.3",
    "jshint-stylish": "^2.0.1",
    "mocha": "*",
    "parse-filepath": "^0.6.3"
  },
  "keywords": [
    "config",
    "configuration",
    "declarative",
    "dot",
    "dot-notation",
    "expand",
    "lodash",
    "resolve",
    "template",
    "underscore"
  ],
  "verb": {
    "related": {
      "list": [
        "get-value",
        "set-value",
        "engine",
        "glob-object",
        "expand-object"
      ],
      "alternatives": [
        "expander"
      ]
    },
    "reflinks": {
      "list": "expander"
    }
  },
  "readme": "# expand [![NPM version](https://badge.fury.io/js/expand.svg)](http://badge.fury.io/js/expand)  [![Build Status](https://travis-ci.org/jonschlinkert/expand.svg)](https://travis-ci.org/jonschlinkert/expand)\n\n> Recursively resolve templates in an object, string or array.\n\n## Heads up!\n\n**v0.2.0 API changes**\n\nThe top-level export now returns a function that takes an options object, which then returns the function to use.\n\n```js\nvar expand = require('expand');\nvar resolve = expand({regex: /:(\\w+)/});\n\nresolve(':a/:b', {a: 'foo', b: 'bar'});\n//=> 'foo/bar'\n```\n\n## Install\n\nInstall with [npm](https://www.npmjs.com/)\n\n```sh\n$ npm i expand --save\n```\n\n## Usage\n\n```js\nvar expand = require('expand')();\nexpand({a: '<%= b %>', b: 'c'});\n//=> {a: 'c', b: 'c'}\n\nexpand({a: '<%= b.c.d %>', b: {c: {d: 'eee'}}});\n//=> {a: 'eee', b: {c: {d: 'eee' }}}\n```\n\n**Params**\n\n```js\nexpand(valueToExpand, dataToUse, options);\n```\n\n* `value` **{String|Array|Object}**: The value with templates to resolve.\n* `data` **{Object}**: Pass the data to use for resolving templates. If the first argument is an object, this is optional.\n* `options` **{Object}**: Pass the regex to use for matching templates.\n* `returns` **{any}**: Returns a string, object or array based on what was passed.\n\n**Example**\n\nIf an object is passed, only the first argument is strictly _necessary_.\n\n```js\nexpand({a: '<%= b %>', b: '<%= c %>', c: 'It worked!'});\n//=> {a: 'It worked!', b: 'It worked!', c: 'It worked!'}\n```\n\n## More examples\n\n### process templates in objects\n\n```js\nexpand({a: {c: '<%= d %>'}, d: {f: 'g'}});\n//=>  {a: {c: {f: 'g'}}, d: {f: 'g'}};\n```\n\n### process a template in an array\n\n```js\nexpand(['<%= a %>'], {a: 'b'});\n//=> ['b']\n```\n\n### process templates in a string\n\n```js\nexpand('<%= a %>', {a: 'b'});\n//=> 'b'\n```\n\n### process multiple templates in an array\n\n```js\nexpand(['<%= a %>', '<%= b %>'], {a: 'b', b: 'c'});\n//=> ['b', 'c']\n```\n\n### expand nested templates in an object\n\n```js\nvar data = {a: {b: {c: 'd'}}};\nexpand({foo: '<%= a.b.c %>'}, data);\n//=> {foo: 'd'}\n```\n\n### recursively expand templates\n\n```js\nvar data = {a: '<%= b %>', b: '<%= c %>', c: 'the end!'};\nexpand('<%= a %>', data);\n//=> 'the end!'\n```\n\n### process multiple templates in the same string\n\n```js\nvar str = '<%= a %>/<%= b %>';\nexpand(str, {a: 'foo', b: 'bar'});\n//=> 'foo/bar'\n```\n\n### process multiple templates in an object value\n\n```js\nvar data = {\n  a: {\n    c: '<%= d %>/<%= e %>'\n  },\n  d: 'ddd',\n  e: 'eee'\n};\nexpand(data).a.c;\n//=> 'ddd/eee'\n```\n\n### recursively process templates in object values\n\n```js\nvar data = {\n  a: '<%= b %>/<%= c %>',\n  b: 'xxx',\n  c: '<%= y %>',\n  y: 'zzz'\n};\nexpand('<%= a %>', data);\n//=> 'xxx/zzz'\n```\n\n### call helpers in templates\n\n```js\nvar ctx = {\n  foo: 'bar',\n  c: {\n    d: {\n      e: function (str) {\n        return str.toUpperCase();\n      }\n    }\n  }\n};\nexpand('abc <%= c.d.e(foo) %> xyz', ctx);\n//=> 'abc BAR xyz'\n```\n\n### use custom regex\n\nOptions may be passed as the third argument. Currently `options.regex` is the only option.\n\n```js\nvar data = {a: 'bbb', c: 'ddd', e: 'fff'};\nexpand({foo: ':c/:e'}, data, {regex: /:([(\\w ),]+)/});\n//=> {foo: 'ddd/fff'}\n```\n\n### call functions with custom regex.\n\n```js\nvar data = {\n  a: {c: ':d/:e/:upper(f)'},\n  d: 'ddd',\n  e: 'eee',\n  f: 'foo',\n  upper: function (str) {\n    return str.toUpperCase();\n  }\n};\n\nvar result = expand(data, data, {regex: /:([(\\w ),]+)/});\nconsole.log(result.a.c);\n//=> 'ddd/eee/FOO'\n```\n\n## Related projects\n\n* [engine](https://www.npmjs.com/package/engine): Template engine based on Lo-Dash template, but adds features like the ability to register helpers… [more](https://www.npmjs.com/package/engine) | [homepage](https://github.com/jonschlinkert/engine)\n* [expand-object](https://www.npmjs.com/package/expand-object): Expand a string into a JavaScript object using a simple notation. Use the CLI or… [more](https://www.npmjs.com/package/expand-object) | [homepage](https://github.com/jonschlinkert/expand-object)\n* [get-value](https://www.npmjs.com/package/get-value): Use property paths (`  a.b.c`) to get a nested value from an object. | [homepage](https://github.com/jonschlinkert/get-value)\n* [glob-object](https://www.npmjs.com/package/glob-object): Filter an object using glob patterns and dot notation. | [homepage](https://github.com/jonschlinkert/glob-object)\n* [set-value](https://www.npmjs.com/package/set-value): Create nested values and any intermediaries using dot notation (`'a.b.c'`) paths. | [homepage](https://github.com/jonschlinkert/set-value)\n\n## Alternatives\n\nHere are some great libs by other authors. My needs for expand differed enough to create a new library, but these are definitely worth a look:\n\n* [expander](https://www.npmjs.com/package/expander): Expand template strings in declarative configurations. | [homepage](https://github.com/tkellen/expander)\n\n## Running tests\n\nInstall dev dependencies:\n\n```sh\n$ npm i -d && npm test\n```\n\n## Contributing\n\nPull requests and stars are always welcome. For bugs and feature requests, [please create an issue](https://github.com/jonschlinkert/expand/issues/new).\n\n## Author\n\n**Jon Schlinkert**\n\n+ [github/jonschlinkert](https://github.com/jonschlinkert)\n+ [twitter/jonschlinkert](http://twitter.com/jonschlinkert)\n\n## License\n\nCopyright © 2015 Jon Schlinkert\nReleased under the MIT license.\n\n***\n\n_This file was generated by [verb-cli](https://github.com/assemble/verb-cli) on October 21, 2015._",
  "readmeFilename": "README.md",
  "_id": "expand@0.3.2",
  "dist": {
    "shasum": "2b332a594e31ce6ce07f95990a99a84ac08a093a"
  },
  "_from": "expand@^0.3.1",
  "_resolved": "https://registry.npmjs.org/expand/-/expand-0.3.2.tgz"
}
