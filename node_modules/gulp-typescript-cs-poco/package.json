{
  "name": "gulp-typescript-cs-poco",
  "version": "1.8.0",
  "description": "A gulp plugin to convert C# POCO classes and enums into Typescript type definitions.",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/Evertras/gulp-typescript-cs-poco.git"
  },
  "keywords": [
    "gulp",
    "typescript",
    "C#"
  ],
  "author": {
    "name": "Brandon Fulljames"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/Evertras/gulp-typescript-cs-poco/issues"
  },
  "homepage": "https://github.com/Evertras/gulp-typescript-cs-poco#readme",
  "dependencies": {
    "gulp-util": "^3.0.7",
    "through2": "^2.0.0",
    "typescript-cs-poco": "1.8.0"
  },
  "readme": "# gulp-typescript-cs-poco\n\n## Overview\n\nSee https://github.com/Evertras/typescript-cs-poco for actual implementation.  This is just a ~~tribute~~ wrapper.\n\nGulp-typescript-cs-poco is a Gulp plugin that translates basic C# POCO classes like this:\n\n```C#\npublic class MyPoco\n{\n\tpublic string Name { get; set; }\n\tpublic int Id { get; set; }\n\tpublic long Value { get; set; }\n\tpublic bool IsValid { get; set; }\n\tpublic SomeOtherPoco RelatedObject { get; set; }\n}\n```\n\nInto this Typescript file:\n\n```typescript\ninterface MyPoco {\n\tName: string;\n\tId: number;\n\tValue: number;\n\tIsValid: boolean;\n\tRelatedObject: SomeOtherPoco;\n}\n```\n\n## Installation\n\nInstall with NPM:\n\n```shell\nnpm install --save-dev gulp-typescript-cs-poco\n```\n\n## Use\n\n```javascript\nvar pocoGen = require('gulp-typescript-cs-poco');\n\ngulp.task('poco', function () {\n  return gulp.src('Models/*.cs')\n              .pipe(pocoGen())\n              .pipe(gulp.dest('Scripts/myPocoTsFolder'));\n})\n```\n\nThis will create a single .ts file for every .cs file it finds.  You can combine this with tools like gulp-concat to turn this into one file if desired.\n\n## Options\n\nOptions can be passed into the function to alter behavior.  You can pass in only the options you need, or none at all for default behavior.\n\n```javascript\nvar pocoGen = require('gulp-typescript-cs-poco');\n\ngulp.task('poco', function () {\n  return gulp.src('Models/*.cs')\n              .pipe(pocoGen({\n                prefixWithI: true,\n                baseNamespace: 'MyNamespace',\n                dateTimeToDate: true,\n                propertyNameResolver: function camelCaseResolver(propName) { return propName[0].toLowerCase() + propName.substring(1); }\n\t\t\t  }))\n              .pipe(gulp.dest('Scripts/myPocoTsFolder'));\n})\n```\n\nOr:\n\n```javascript\nvar pocoGen = require('gulp-typescript-cs-poco');\n\ngulp.task('poco', function () {\n  var pocoGenOptions = {\n    prefixWithI: true,\n    baseNamespace: 'MyNamespace',\n    dateTimeToDate: true,\n    propertyNameResolver: function camelCaseResolver(propName) { return propName[0].toLowerCase() + propName.substring(1); }\n  };\n\n  return gulp.src('Models/*.cs')\n              .pipe(pocoGen(pocoGenOptions))\n              .pipe(gulp.dest('Scripts/myPocoTsFolder'));\n})\n```\n\n##### prefixWithI\n\nDefaults to false.  If set to true, all interfaces (but not enums) will be prefixed with I.  The conversion will now look like this:\n\n```C#\npublic class MyPoco\n{\n\tpublic string Name { get; set; }\n\tpublic int Id { get; set; }\n}\n```\n\nTo:\n\n```typescript\ninterface IMyPoco {\n\tName: string;\n\tId: number;\n}\n```\n\n##### baseNamespace\n\nIf supplied, wraps all classes into a module with the same name.  Example:\n\n```C#\npublic class MyPoco\n{\n\tpublic string Name { get; set; }\n\tpublic int Id { get; set; }\n}\n```\n\n```typescript\nmodule MyNamespace {\n\texport interface IMyPoco {\n\t\tName: string;\n\t\tId: number;\n\t}\n}\n```\n\nNote that using this option with gulp concat() will create many individual module/interface declarations.  This is technically valid, but if you want a nice, clean version run concat() first on all your .cs files and then run this plugin with the baseNamespace option to wrap EVERYthing in a single module namespace.\n\n##### dateTimeToDate\n\nDefaults to false.  Due to serialization/deserialization complications, the default implementation is to transform DateTime fields to strings, as that's what they naturally turn into in most .NET APIs.  If you want to treat the type as a Date, *first make sure your API is handling the serialization properly*!  Then provide the dateTimeToDate option set to true to turn this:\n\n```C#\npublic class MyPoco\n{\n  public DateTime Timestamp { get; set; }\n  public double Value { get; set; }\n}\n```\n\nInto this:\n\n```typescript\ninterface IMyPoco {\n  Timestamp: Date;\n  Value: number;\n}\n```\n\n##### definitionFile\n\nDefaults to true.  If explicitly set to false, the output file will not be of type d.ts and any baseNamespace being used will not have declare before the module name.\n\n##### propertyNameResolver\n\nIf supplied, this function will be called every time a property is resolved.  The function takes a single parameter of the name of the property and should return the transformed name as a string.  For example, the function might turn the property name into camelCase, or prepend it with a prefix of some sort to help match an API-side transformation.\n\n##### ignoreVirtual\n\nIf set to true, virtual properties will be ignored.  This is useful for things like EF-created POCOs that may have virtual reference fields that shouldn't be included.\n",
  "readmeFilename": "README.md",
  "_id": "gulp-typescript-cs-poco@1.8.0",
  "dist": {
    "shasum": "879daa3aeecc4d0498f7e16e9b46c2fc0c7d1369"
  },
  "_from": "gulp-typescript-cs-poco@^1.7.1",
  "_resolved": "https://registry.npmjs.org/gulp-typescript-cs-poco/-/gulp-typescript-cs-poco-1.8.0.tgz"
}
